import unittest
from typing import Any

from assoc_array import Node, BinaryTree, RedBlackTree


class Test_Node(unittest.TestCase):

    def test_value(self):
        a = Node("a")
        b = Node("b")
        self.assertEqual(a.get_value(), "a")
        self.assertEqual(b.get_value(), "b")
        a.set_value(1)
        self.assertEqual(a.get_value(), 1)
        self.assertEqual(b.get_value(), "b")

    def test_links(self):
        a = Node("a")
        b = Node("b")
        c = Node("c")
        self.assertIsNone(a.get_parent())
        self.assertIsNone(a.get_left_child())
        self.assertIsNone(a.get_right_child())
        self.assertIsNone(b.get_parent())
        self.assertIsNone(b.get_left_child())
        self.assertIsNone(b.get_right_child())
        self.assertIsNone(c.get_parent())
        self.assertIsNone(c.get_left_child())
        self.assertIsNone(c.get_right_child())
        a.set_left_child(b)
        b.set_parent(a)
        a.set_right_child(c)
        c.set_parent(a)
        self.assertIsNone(a.get_parent())
        self.assertIs(a.get_left_child(), b)
        self.assertIs(a.get_right_child(), c)
        self.assertIs(b.get_parent(), a)
        self.assertIsNone(b.get_left_child())
        self.assertIsNone(b.get_right_child())
        self.assertIs(c.get_parent(), a)
        self.assertIsNone(c.get_left_child())
        self.assertIsNone(c.get_right_child())
        a.set_left_child(None)
        b.set_parent(None)
        a.set_right_child(None)
        c.set_parent(None)
        self.assertIsNone(a.get_parent())
        self.assertIsNone(a.get_left_child())
        self.assertIsNone(a.get_right_child())
        self.assertIsNone(b.get_parent())
        self.assertIsNone(b.get_left_child())
        self.assertIsNone(b.get_right_child())
        self.assertIsNone(c.get_parent())
        self.assertIsNone(c.get_left_child())
        self.assertIsNone(c.get_right_child())


class Test_BinaryTree(unittest.TestCase):

    def check_subtree(self, tree: BinaryTree, pattern: list[Any], count: list[int]):
        assert(len(pattern) == 3)
        self.assertEqual(pattern[0], tree.get_node_value())
        count[0] += 1
        if pattern[1] != []:
            tree.go_left_child()
            self.check_subtree(tree, pattern[1], count)
            tree.go_parent()
        if pattern[2] != []:
            tree.go_right_child()
            self.check_subtree(tree, pattern[2], count)
            tree.go_parent()

    def check(self, tree: BinaryTree, pattern: list[Any]):
        if pattern == []:
            self.assertEqual(tree.get_size(), 0)
            return
        tree.go_root()
        count = [0]
        self.check_subtree(tree, pattern, count)
        self.assertEqual(tree.get_size(), count[0])

    
    def test_build(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_add_root_status(), BinaryTree.AddRootStatus.NIL)
        self.assertEqual(bt.get_add_child_status(), BinaryTree.AddChildStatus.NIL)
        self.check(bt, [])
        bt.add_left_child("foo")
        self.assertEqual(bt.get_add_child_status(), BinaryTree.AddChildStatus.EMPTY_TREE)
        bt.add_right_child("foo")
        self.assertEqual(bt.get_add_child_status(), BinaryTree.AddChildStatus.EMPTY_TREE)

        bt.add_root("a")
        self.check(bt, ["a", [], []])
        bt.add_root("foo")
        self.assertEqual(bt.get_add_root_status(), BinaryTree.AddRootStatus.ALREADY_EXISTS)
        self.check(bt, ["a", [], []])

        bt.go_root()
        bt.add_left_child("b")
        self.check(bt, ["a", ["b", [], []], []])
        bt.go_root()
        bt.add_right_child("c")
        self.check(bt, ["a", ["b", [], []], ["c", [], []]])
        bt.go_root()
        bt.add_left_child("foo")
        self.assertEqual(bt.get_add_child_status(), BinaryTree.AddChildStatus.ALREADY_EXISTS)
        bt.add_right_child("foo")
        self.assertEqual(bt.get_add_child_status(), BinaryTree.AddChildStatus.ALREADY_EXISTS)

        bt.go_root()
        bt.go_left_child()
        bt.add_left_child("d")
        self.check(bt, ["a", ["b", ["d", [], []], []], ["c", [], []]])

        bt.go_root()
        bt.go_left_child()
        bt.add_right_child("e")
        self.check(bt, ["a", ["b", ["d", [], []], ["e", [], []]], ["c", [], []]])

    
    def test_get(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_get_node_value_status(), BinaryTree.GetNodeValueStatus.NIL)
        bt.get_node_value()
        self.assertEqual(bt.get_get_node_value_status(), BinaryTree.GetNodeValueStatus.EMPTY_TREE)
        bt.add_root("a")
        self.assertEqual(bt.get_node_value(), "a")
        self.assertEqual(bt.get_get_node_value_status(), BinaryTree.GetNodeValueStatus.OK)

    def test_set(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_set_node_value_status(), BinaryTree.SetNodeValueStatus.NIL)
        bt.set_node_value("foo")
        self.assertEqual(bt.get_set_node_value_status(), BinaryTree.SetNodeValueStatus.EMPTY_TREE)
        bt.add_root("a")
        bt.set_node_value("foo")
        self.assertEqual(bt.get_set_node_value_status(), BinaryTree.SetNodeValueStatus.OK)
        self.assertEqual(bt.get_node_value(), "foo")


    def test_go(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NIL)
        bt.go_root()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_parent()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        
        bt.add_root("a")
        bt.go_root()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.go_parent()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        
        bt.add_left_child("b")
        bt.add_right_child("c")
        bt.go_parent()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_parent()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        
        bt.go_root()
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.add_left_child("d")
        bt.add_right_child("e")
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.go_left_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.NO_TARGET)
        bt.go_parent()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)
        bt.go_right_child()
        self.assertEqual(bt.get_go_status(), BinaryTree.GoStatus.OK)

    
    def test_delete(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.NIL)
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.EMPTY_TREE)
        bt.add_root("a")
        bt.add_left_child("b")
        bt.add_right_child("c")
        bt.go_left_child()
        bt.add_left_child("d")
        bt.add_right_child("e")
        bt.go_parent()
        bt.go_right_child()
        bt.add_left_child("f")
        bt.add_right_child("g")
        self.check(bt, ["a", ["b", ["d", [], []], ["e", [], []]], ["c", ["f", [], []], ["g", [], []]]])
        bt.go_root()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "f")
        self.check(bt, ["f", ["b", ["d", [], []], ["e", [], []]], ["c", [], ["g", [], []]]])
        bt.go_root()
        bt.go_right_child()
        bt.go_right_child()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "c")
        self.check(bt, ["f", ["b", ["d", [], []], ["e", [], []]], ["c", [], []]])
        bt.go_root()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "c")
        self.check(bt, ["c", ["b", ["d", [], []], ["e", [], []]], []])
        bt.go_root()
        bt.go_left_child()
        bt.go_left_child()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "b")
        self.check(bt, ["c", ["b", [], ["e", [], []]], []])
        bt.go_root()
        bt.go_left_child()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "e")
        self.check(bt, ["c", ["e", [], []], []])
        bt.go_root()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.assertEqual(bt.get_node_value(), "e")
        self.check(bt, ["e", [], []])
        bt.go_root()
        bt.delete()
        self.assertEqual(bt.get_delete_status(), BinaryTree.DeleteStatus.OK)
        self.check(bt, [])


    def test_rotate_right_root(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.NIL)
        bt.rotate_right()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.EMPTY_TREE)
        bt.add_root("a")
        bt.add_right_child("c")
        bt.rotate_right()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.NO_PROPER_CHILD)
        bt.add_left_child("b")
        bt.go_left_child()
        bt.add_left_child("d")
        bt.add_right_child("e")
        self.check(bt, ["a", ["b", ["d", [], []], ["e", [], []]], ["c", [], []]])
        bt.go_root()
        bt.rotate_right()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.OK)
        self.assertEqual(bt.get_node_value(), "b")
        self.check(bt, ["b", ["d", [], []], ["a", ["e", [], []], ["c", [], []]]])

    def test_rotate_right_branch(self):
        bt = BinaryTree()
        bt.add_root("a")
        bt.add_left_child("b")
        bt.add_right_child("c")
        bt.go_left_child()
        bt.add_left_child("d")
        bt.add_right_child("e")
        bt.go_left_child()
        bt.add_left_child("f")
        bt.add_right_child("g")
        self.check(bt, ["a", ["b", ["d", ["f", [], []], ["g", [], []]], ["e", [], []]], ["c", [], []]])
        bt.go_root()
        bt.go_left_child()
        bt.rotate_right()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.OK)
        self.assertEqual(bt.get_node_value(), "d")
        self.check(bt, ["a", ["d", ["f", [], []], ["b", ["g", [], []], ["e", [], []]]], ["c", [], []]])

    def test_rotate_left_root(self):
        bt = BinaryTree()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.NIL)
        bt.rotate_left()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.EMPTY_TREE)
        bt.add_root("a")
        bt.add_left_child("b")
        bt.rotate_left()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.NO_PROPER_CHILD)
        bt.add_right_child("c")
        bt.go_right_child()
        bt.add_left_child("d")
        bt.add_right_child("e")
        self.check(bt, ["a", ["b", [], []], ["c", ["d", [], []], ["e", [], []]]])
        bt.go_root()
        bt.rotate_left()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.OK)
        self.assertEqual(bt.get_node_value(), "c")
        self.check(bt, ["c", ["a", ["b", [], []], ["d", [], []]], ["e", [], []]])

    def test_rotate_left_branch(self):
        bt = BinaryTree()
        bt.add_root("a")
        bt.add_left_child("b")
        bt.add_right_child("c")
        bt.go_right_child()
        bt.add_left_child("d")
        bt.add_right_child("e")
        bt.go_right_child()
        bt.add_left_child("f")
        bt.add_right_child("g")
        self.check(bt, ["a", ["b", [], []], ["c", ["d", [], []], ["e", ["f", [], []], ["g", [], []]]]])
        bt.go_root()
        bt.go_right_child()
        bt.rotate_left()
        self.assertEqual(bt.get_rotate_status(), bt.RotateStatus.OK)
        self.assertEqual(bt.get_node_value(), "e")
        self.check(bt, ["a", ["b", [], []], ["e", ["c", ["d", [], []], ["f", [], []]], ["g", [], []]]])


def compare(x: Any, y: Any) -> RedBlackTree.CompareResult:
    if x[0] > y[0]:
        return RedBlackTree.CompareResult.GREATER
    if x[0] < y[0]:
        return RedBlackTree.CompareResult.LESS
    return RedBlackTree.CompareResult.EQUAL


class Test_RedBlackTree(unittest.TestCase):

    def test_build(self):
        rbt = RedBlackTree(compare)
        self.assertEqual(rbt.get_size(), 0)
        self.assertFalse(rbt.has_value(("alpha", None)))
        rbt.put(("alpha", 1))
        self.assertEqual(rbt.get_size(), 1)
        self.assertTrue(rbt.has_value(("alpha", None)))
        self.assertEqual(rbt.get(("alpha", None)), ("alpha", 1))
        rbt.put(("alpha", 2))
        self.assertEqual(rbt.get_size(), 1)
        self.assertTrue(rbt.has_value(("alpha", None)))
        self.assertEqual(rbt.get(("alpha", None)), ("alpha", 2))
        rbt.put(("beta", 3))
        self.assertEqual(rbt.get_size(), 2)
        self.assertTrue(rbt.has_value(("alpha", None)))
        self.assertTrue(rbt.has_value(("beta", None)))
        self.assertEqual(rbt.get(("alpha", None)), ("alpha", 2))
        self.assertEqual(rbt.get(("beta", None)), ("beta", 3))


if __name__ == "__main__":
    unittest.main()
